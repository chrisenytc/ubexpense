import {
	React,
	ReactDOM,
	Actions,
	Thread,
	DatabaseStore,
	QuotedHTMLTransformer
} from 'nylas-exports';

import _ from 'lodash';
import Promise from 'bluebird';
import moment from 'moment-timezone';

import {RetinaImg} from 'nylas-component-kit';

// Note: change this constants to use with your own email account
const TIMEZONE = 'America/Sao_Paulo'; // Change to your timezone to search for receipts on your email account
const RECEIPT_EMAIL = 'uber.brasil@uber.com'; // Find the email that uber uses to send your receipts

export default class CalculateButton extends React.Component {

	// Note: You should assign a new displayName to avoid naming
	// conflicts when injecting your item
	static displayName = 'CalculateButton';

	constructor() {
		super();

		this._startDate = ''
		this._endDate = ''
	}

	// When you register as a composer button, you receive a
	// reference to the draft, and you can look it up to perform
	// actions and retrieve data.
	static propTypes = {
		draft: React.PropTypes.object.isRequired,
		session: React.PropTypes.object.isRequired,
	};

	shouldComponentUpdate(nextProps) {
		// Our render method doesn't use the provided `draft`, and the draft changes
		// constantly (on every keystroke!) `shouldComponentUpdate` helps keep N1 fast.
		return nextProps.session !== this.props.session;
	}

	_onClickCalculate = () => {
		const {session, draft} = this.props;

		// To retrieve information about the draft, we fetch the current editing
		// session from the draft store. We can access attributes of the draft
		// and add changes to the session which will be appear immediately.

		const dialog = this._getDialog();

		const startDate = moment(this._startDate).tz(TIMEZONE).toDate();
		const endDate = moment(this._endDate).tz(TIMEZONE).toDate();

		DatabaseStore.findAll(Thread)
			.where([
				Thread.attributes.participants.contains(RECEIPT_EMAIL)
			])
			.then((threads) => {
				if (threads && threads.length < 1) {
					dialog.showMessageBox({
						detail: `No receipts found.`,
						buttons: ['OK'],
						type: 'info',
					});
					return;
				}

				Promise.map(threads, (thr) => {
					return thr.messages().then((msgs) => { return _.last(msgs) })
				}).then((result) => {
					return _.filter(result, (m) => {
						let date = moment(m.date).tz(TIMEZONE).toDate();
						return _.gte(date, endDate) && _.lte(date, startDate);
					});
				}).then((messages) => {
					return _.filter(messages, (m) => {
						return new RegExp(/^R\$/).test(m.snippet);
					});
				}).then((messages) => {
					return [_.map(messages, (msg) => {
						return parseFloat(msg.snippet.split(' ')[0].replace(/R\$/g, ''));
					}), messages]
				}).spread((values, messages) => {
					const subject = `Uber expense statement by UbExpense`;

					const rawBody = `
						<p><b>From date:</b> ${moment(startDate).tz(TIMEZONE).format('LLLL')}</p>
						<p><b>To date:</b> ${moment(endDate).tz(TIMEZONE).format('LLLL')}</p>

						</br>

						<p><b>Resume:</b> R$ ${values.join('+')}</p>

						<p><strong>You had spent with Uber:</strong> <span style="color:red;">R$ ${_.sum(values)}</span</p>

						</br>

						<p>Generated by <b>UbExpense</p> (https://github.com/chrisenytc/ubexpense)</p>
					`;

					const body = QuotedHTMLTransformer.appendQuotedHTML(rawBody, '');

					session.changes.add({subject: subject, body: body});
					session.changes.commit();
				});
			});
	}

	_onClick = () => {
		const buttonRect = ReactDOM.findDOMNode(this).getBoundingClientRect();

		Actions.openPopover(
			this._renderPopover(),
			{originRect: buttonRect, direction: 'up'}
		);
	}

	_onChangeStart = (event) => {
		this._startDate = event.target.value;
	}

	_onChangeEnd = (event) => {
		this._endDate = event.target.value;
	}

	_getDialog() {
		return require('electron').remote.dialog;
	}

	// Helper method that will render the contents of our popover.
	_renderPopover() {
		return (
			<div className="button-popover" tabIndex="-1">
				<div
					className="finder-container"
				>
					<div className="search-container">
						<input
							type="text"
							placeholder="Enter the start date"
							onChange={this._onChangeStart}
						/>
					</div>
					<div className="search-container">
						<input
							type="text"
							placeholder="Enter the end date"
							onChange={this._onChangeEnd}
						/>
					</div>
					<div className="search-container">
						<button
							className="btn btn-toolbar btn-block"
							onClick={this._onClickCalculate}
							title="Calculate expense"
						>Calculate</button>
					</div>
				</div>
			</div>
		)
	}

	render() {
		return (
			<button
				tabIndex={-1}
				className="btn btn-toolbar pull-right"
				onClick={() => this._onClick()}
				title="Calculate expense"
				ref="button"
			>
				<RetinaImg
					mode={RetinaImg.Mode.ContentIsMask}
					url="nylas://ubexpense/icon@2x.png"
				/>
				&nbsp;
				<RetinaImg
					name="icon-composer-dropdown.png"
					mode={RetinaImg.Mode.ContentIsMask}
				/>
			</button>
		);
	}
}
